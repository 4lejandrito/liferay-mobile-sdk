def tasksGroup = 'Liferay'

subprojects {
	repositories {
		mavenLocal()
		mavenCentral()
	}
}

configure(subprojects.findAll { it.name != 'ios' }) {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'maven'
	apply plugin: 'signing'

	sourceCompatibility = JavaVersion.VERSION_1_6

	repositories {
		maven {
			url 'https://repository.liferay.com/nexus/content/groups/liferay-ce'
		}
	}

	configurations {
		formatter
	}

	dependencies {
		formatter group: 'com.liferay.portal', name: 'portal-impl', version: '6.2.0-ga1'
		formatter group: 'com.liferay.portal', name: 'portal-service', version: '6.2.0-ga1'
		formatter group: 'com.liferay.portal', name: 'util-java', version: '6.2.0-ga1'
		formatter group: 'dom4j', name: 'dom4j', version: '1.6.1'
		formatter group: 'org.apache.ant', name: 'ant', version: '1.8.2'
	}

	install {
		repositories.mavenInstaller {
			pom.groupId = 'com.liferay.mobile'

			pom.project {
				name project.description
				description project.description
				url 'https://www.liferay.com/community/liferay-projects/liferay-mobile-sdk/overview'
				licenses {
					license {
						name 'LGPL 2.1'
						url 'http://opensource.org/licenses/lgpl-2.1.php'
						distribution 'repo'
					}
				}
				scm {
					url 'https://github.com/liferay/liferay-mobile-sdk'
					connection 'scm:git:git://github.com/liferay/liferay-mobile-sdk.git'
				}
				developers {
					developer {
						id 'brunofarache'
						name 'Bruno Farache'
						email 'bruno.farache@liferay.com'
					}
				}
			}
		}
	}

	task format(type: JavaExec) {
		group = tasksGroup
		description = 'Runs Liferay Source Formatter to format files within src/main/java.'
		main = 'com.liferay.portal.tools.sourceformatter.SourceFormatter'
		classpath = configurations.formatter
		workingDir = 'src/main/java'
	}

	task jarSources(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task jarJavadoc(type: Jar, dependsOn:javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

	artifacts {
		archives jarSources
		archives jarJavadoc
	}

	signing {
		sign configurations.archives
	}

	task signPom(type: Sign, dependsOn: install) {
		sign file('build/poms/pom-default.xml')
	}

	task publish(type: Copy, dependsOn: signPom) {
		group = tasksGroup
		description = 'Prepares artifacts for publishing to Maven Central.'
		from 'build/poms'
		into 'build/libs'

		rename { String name ->
			name.replace('pom-default.xml', "${archivesBaseName}-${version}.pom")
		}
	}
}

configure(subprojects.findAll { it.name != 'builder' }) {
	defaultTasks 'generate'

	configurations {
		builder
	}

	dependencies {
		builder project(':builder')
	}

	task generate(type: JavaExec) {
		group = tasksGroup
		description = 'Runs Liferay SDK Builder with arguments set in gradle.properties.'
		main = 'com.liferay.mobile.sdk.SDKBuilder'
		classpath = configurations.builder

		args = [
			"platforms=$platforms",
			"url=$url",
			"context=$context",
			"filter=$filter",
			"packageName=$packageName",
			"portalVersion=$portalVersion",
			"destination=$destination"
		]
	}
}

configure(subprojects.findAll { it.name.startsWith('modules/') }) {
	archivesBaseName = "liferay-android-${context}"

	sourceSets {
		main {
			java {
				srcDir 'android/src/gen/java'
			}
		}
		test {
			java {
				srcDir 'android/src/test/java'
			}
		}
	}

	dependencies {
		compile project(':android')
		testCompile group: 'junit', name: 'junit', version: '4.+'
	}
}

task createModule << {
	def console = System.console()

	if (console) {
		def n = System.getProperty("line.separator")

		def context = console.readLine('> Plugin web context: ')

		// Android related properties

		def packageName = console.readLine('> Package name: ')
		def description = console.readLine('> Description: ')

		def moduleDir = "${project.rootDir}/modules/$context"
		file(moduleDir).mkdirs()

		def gradleProperties = file("$moduleDir/gradle.properties")
		gradleProperties.createNewFile()

		gradleProperties.append("context=${context}")
		gradleProperties.append("${n}packageName=${packageName}")
		gradleProperties.append("${n}description=${description}")

		def settingsGradle = file("${project.rootDir}/settings.gradle")
		settingsGradle.append("${n}${n}// Module created by createModule task")
		settingsGradle.append("${n}include 'modules/${context}'")
	}
	else {
		logger.error "Error while getting console."
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.11'
}