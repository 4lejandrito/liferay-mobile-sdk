ext {
	COLORS = [
		CYAN: 36,
		GREEN: 32,
		RED: 31,
		YELLOW: 33,
		WHITE: 37
	]
	N = System.getProperty("line.separator")
}

configure(allprojects.findAll { it.name != 'builder' }) {
	defaultTasks 'generate'

	configurations {
		builder
	}

	dependencies {
		builder project(':builder')
	}

	task generate(type: JavaExec) {
		group = tasksGroup
		description = 'Runs Liferay SDK Builder with arguments set in gradle.properties.'
		main = 'com.liferay.mobile.sdk.SDKBuilder'
		classpath = configurations.builder

		args = [
			"platforms=$platforms",
			"url=$url",
			"context=$context",
			"filter=$filter",
			"packageName=$packageName",
			"portalVersion=$portalVersion",
			"destination=$destination"
		]
	}
}

configure(subprojects.findAll { it.name.startsWith('modules/') }) {
	apply plugin: 'java'

	archivesBaseName = "liferay-${context}-android-sdk"

	sourceSets {
		main {
			java {
				srcDir 'android/src/gen/java'
			}
		}
		test {
			java {
				srcDir 'android/src/test/java'
			}
		}
	}

	dependencies {
		compile project(':android')
		testCompile group: 'junit', name: 'junit', version: '4.+'
	}

	task zip(type: Zip) {
		group = tasksGroup
		description = 'Zips generated iOS SDK for this module.'
		baseName = "liferay-ios-${context}"
		destinationDir = project.buildDir
		version = project.version
		from 'ios/Source'
		doLast {
			println "Zipped to ${archivePath}"
		}
	}
}

task createModule << {
	def console = System.console()

	if (console) {
		def all = project.hasProperty('all')

		def context = read("${N}Context", project.ext['context'])
		def String platforms = project.ext['platforms']
		def url = project.ext['url']
		def filter = project.ext['filter']
		def portalVersion = project.ext['portalVersion']
		def version = project.version
		def packageName = project.ext['packageName']
		def description = project.description

		if (all) {
			platforms = read('Platforms', platforms)
			url = read('Server URL', url)
			filter = read('Filter', filter, false)
			portalVersion = read('Portal Version', portalVersion)
			version = read('Module Version', version)
		}

		def moduleDir = "${project.rootDir}/modules/$context/"
		file(moduleDir).mkdirs()

		def props = file("$moduleDir/gradle.properties")
		props.createNewFile()

		write(props, 'context', context)

		if (all) {
			write(props, 'platforms', platforms)
			write(props, 'url', url)
			write(props, 'filter', filter)
			write(props, 'portalVersion', portalVersion)
			write(props, 'version', version, project.version)
		}

		if (platforms.contains('android')) {
			packageName = read('Package Name', packageName)
			description = read('POM Description', description)

			write(props, 'packageName', packageName)
			write(props, 'description', description, project.description)
		}

		generate.args = [
			"platforms=$platforms",
			"url=$url",
			"context=$context",
			"filter=$filter",
			"packageName=$packageName",
			"portalVersion=$portalVersion",
			"destination=$moduleDir"
		]

		println addTextColor("Module was successfully created at ${moduleDir}.", COLORS.GREEN)
		println addTextColor("SDK Builder will generate now all services with the details you provided.", COLORS.GREEN)
	}
	else {
		println addTextColor("Error while getting console.", COLORS.RED)
	}
}

createModule {
	group = tasksGroup
	description = "Creates SDK Builder modules."
}

createModule.finalizedBy(generate)

def addTextColor(text, startColor, endColor=COLORS.WHITE) {
	return "${Character.toChars(27)}[${startColor}m${text}${Character.toChars(27)}[${endColor}m"
}

def read(phrase, property, required=true) {
	def console = System.console()
	def coloredProperty = addTextColor(" [${property}]", COLORS.CYAN, COLORS.YELLOW)
	def defaultValue = (property.isAllWhitespace()) ? '' : coloredProperty
	def line = console.readLine(addTextColor("${phrase}${defaultValue}: ", COLORS.YELLOW))

	if (!line.isAllWhitespace()) {
		property = line
	}

	if (required && property.isAllWhitespace()) {
		println addTextColor("This property is required and can't be empty.", COLORS.RED)
		property = read(phrase, property, true)
	}

	return property
}

def write(file, key, value, defaultValue=project.ext[key]) {
	if (defaultValue != value) {
		file.append("${key}=${value}${N}")
	}
}