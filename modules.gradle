ext {
	COLORS = [
		CYAN: 36,
		RED: 31,
		YELLOW: 33,
		WHITE: 37
	]
	N = System.getProperty("line.separator")
}

configure(subprojects.findAll { it.name.startsWith('modules/') }) {
	archivesBaseName = "liferay-android-${context}"

	sourceSets {
		main {
			java {
				srcDir 'android/src/gen/java'
			}
		}
		test {
			java {
				srcDir 'android/src/test/java'
			}
		}
	}

	dependencies {
		compile project(':android')
		testCompile group: 'junit', name: 'junit', version: '4.+'
	}

	task zip(type: Zip) {
		group = tasksGroup
		description = 'Zips generated iOS SDK for this module.'
		baseName = "liferay-ios-${context}"
		destinationDir = project.buildDir
		version = project.version
		from 'ios/Source'
		doLast {
			println "Zipped to ${archivePath}"
		}
	}
}

task createModule << {
	def console = System.console()

	if (console) {
		def all = project.hasProperty('all')
		def context = readProperty("${N}Context", project.ext['context'])
		def String platforms = 'android,ios'

		if (all) {
			platforms = readProperty('Platforms', project.ext['platforms'])
			def url = readProperty('Server URL', project.ext['url'])
			def filter = readProperty('Filter', project.ext['filter'], false)
			def portalVersion = readProperty('Portal Version', project.ext['portalVersion'])
			def version = readProperty('Module Version', project.version)
		}

		def moduleDir = "${project.rootDir}/modules/$context"
		file(moduleDir).mkdirs()

		def gradleProperties = file("$moduleDir/gradle.properties")
		gradleProperties.createNewFile()

		writeProperty(gradleProperties, 'context', context)

		if (all) {
			writeProperty(gradleProperties, 'platforms', platforms)
			writeProperty(gradleProperties, 'url', url)
			writeProperty(gradleProperties, 'filter', filter)
			writeProperty(gradleProperties, 'portalVersion', portalVersion)
			writeProperty(gradleProperties, 'version', version, project.version)
		}

		if (platforms.contains('android')) {
			def packageName = readProperty('Package Name', project.ext['packageName'])
			def description = readProperty('POM Description', project.description)

			writeProperty(gradleProperties, 'packageName', packageName)
			writeProperty(gradleProperties, 'description', description, project.description)
		}
	}
	else {
		println addTextColor("Error while getting console.", COLORS.RED)
	}
}

createModule {
	group = tasksGroup
	description = "Creates SDK Builder modules."
}

def addTextColor(text, startColor, endColor=COLORS.WHITE) {
	return "${Character.toChars(27)}[${startColor}m${text}${Character.toChars(27)}[${endColor}m"
}

def readProperty(phrase, property, required=true) {
	def console = System.console()
	def coloredProperty = addTextColor(" [${property}]", COLORS.CYAN, COLORS.YELLOW)
	def defaultValue = (property.isAllWhitespace()) ? '' : coloredProperty
	def line = console.readLine(addTextColor("${phrase}${defaultValue}: ", COLORS.YELLOW))

	if (!line.isAllWhitespace()) {
		property = line
	}

	if (required && property.isAllWhitespace()) {
		println addTextColor("This property is required and can't be empty.", COLORS.RED)
		property = readProperty(phrase, property, true)
	}

	return property
}

def writeProperty(file, key, value, defaultValue=project.ext[key]) {
	if (defaultValue != value) {
		file.append("${key}=${value}${N}")
	}
}