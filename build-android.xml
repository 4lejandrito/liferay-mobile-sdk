<?xml version="1.0"?>

<project name="android-sdk" basedir="." default="build-service">
	<import file="build-common.xml" />

	<property name="dist.dir.android" value="${dist.dir}/android" />

	<property name="android.dir" value="${project.dir}/android" />
	<property name="android.classes" value="${android.dir}/classes" />
	<property name="android.src" value="${android.dir}/src" />

	<property name="gen.dir" value="${project.dir}/gen" />
	<property name="gen.classes" value="${gen.dir}/classes" />
	<property name="gen.src" value="${gen.dir}/src" />

	<property name="test.dir" value="${project.dir}/test" />
	<property name="test.classes" value="${test.dir}/classes" />
	<property name="test.src" value="${test.dir}/src" />

	<path id="android.classpath">
		<fileset dir="${lib.dir}/android" includes="**/*.jar" />
	</path>

	<path id="test.classpath">
		<pathelement location="${android.classes}" />
		<pathelement location="${gen.classes}" />
		<pathelement location="${test.classes}" />
		<fileset dir="${development.dir}" includes="**/*.jar" />
	</path>

	<target name="build-service">
		<antcall target="clear-gen" />

		<antcall target="build-common.build-service">
			<param name="builder" value="android" />
		</antcall>

		<antcall target="format-source-gen" />
	</target>

	<!-- Example on how to build a single service (dlapp) -->

	<!--
	<target name="build-service-dlapp">
		<antcall target="build-service">
			<param name="filter" value="dlapp" />
		</antcall>
	</target>

	<target name="jar-dlapp">
		<jar
			basedir="${gen.classes}"
			includes="com/liferay/mobile/android/**/dlapp/**"
			jarfile="${dist.dir.android}/dlapp.jar"
		/>
	</target>
	-->

	<target name="clear-gen">
		<delete includeemptydirs="true">
			<fileset dir="${gen.dir}"  includes="**/*" />
		</delete>
	</target>

	<target name="compile-all">
		<delete dir="${android.classes}" />

		<mkdir dir="${android.classes}" />

		<javac
			classpathref="android.classpath"
			debug="on"
			destdir="${android.classes}">

			<src path="${android.src}" />
			<src path="${gen.src}" />
		</javac>
	</target>

	<target name="compile-common">
		<delete dir="${android.classes}" />

		<mkdir dir="${android.classes}" />

		<javac
			classpathref="android.classpath"
			debug="on"
			destdir="${android.classes}">

			<src path="${android.src}" />
		</javac>
	</target>

	<target name="compile-test" depends="compile-all">
		<delete dir="${test.classes}" />

		<mkdir dir="${test.classes}" />

		<copy todir="${test.classes}">
			<fileset dir="${test.src}" includes="*.properties" />
		</copy>

		<javac
			classpathref="test.classpath"
			debug="on"
			destdir="${test.classes}"
			sourcepath=""
			srcdir="${test.src}">

			<exclude name="**/plugin/*Test.java" />
		</javac>
	</target>

	<target name="format-source-common">
		<antcall target="build-common.format-source">
			<param name="src.dir" value="${android.dir}" />
		</antcall>
	</target>

	<target name="format-source-gen">
		<jalopy fileformat="unix"
				convention="jalopy.xml">

			<fileset dir="${gen.dir}">
				<include name="**/*.java" />
			</fileset>
		</jalopy>
	</target>

	<target name="format-source-test">
		<antcall target="build-common.format-source">
			<param name="src.dir" value="${test.dir}" />
		</antcall>
	</target>

	<taskdef name="jalopy" classname="de.hunsicker.jalopy.plugin.ant.AntPlugin">
		<classpath>
			<fileset dir="${development.dir}">
				<include name="*.jar" />
			</fileset>
		</classpath>
	</taskdef>

	<target name="jar-all" depends="compile-all">
		<jar destfile="${dist.dir.android}/liferay-android-sdk.jar">
			<fileset dir="${android.classes}" includes="**/*.class" />
		</jar>
	</target>

	<target name="jar-common" depends="compile-common">
		<jar destfile="${dist.dir.android}/liferay-android-sdk-common.jar">
			<fileset dir="${android.classes}" includes="**/*.class" />
		</jar>
	</target>

	<target name="jar-sources">
		<jar destfile="${dist.dir.android}/liferay-android-sdk-sources.jar">
			<fileset dir="${android.src}" includes="**/*.java" />
			<fileset dir="${gen.src}" includes="**/*.java" />
		</jar>
	</target>

	<target name="test" depends="compile-test">
		<junit printsummary="withOutAndErr">
			<classpath>
				<path refid="test.classpath" />
			</classpath>

			<formatter type="plain" />

			<batchtest todir="${test.dir}/logs">
				<fileset dir="${test.src}">
					<include name="**/portal/*Test.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>
</project>